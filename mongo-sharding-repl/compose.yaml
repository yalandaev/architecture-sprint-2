name: mongo-sharding-repl

services:
  mongos1:
    image: mongo:latest
    container_name: mongos_router_1
    restart: always
    ports:
      - "27024:27024"
    command: mongos --configdb config_server/configSrv:27017 --bind_ip_all --port 27024
    depends_on:
      - configSrv
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongos2:
    image: mongo:latest
    container_name: mongos_router_2
    restart: always
    ports:
      - "27025:27025"
    command: mongos --configdb config_server/configSrv:27017 --bind_ip_all --port 27025
    depends_on:
      - configSrv
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  configSrv:
    image: mongo:latest
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command: mongod --configsvr --replSet config_server --bind_ip_all --port 27017
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-rep1:
    image: mongo:latest
    container_name: shard1-rep1
    restart: always
    ports:
      - "27018:27018"
    volumes:
      - shard1-rep1-data:/data/db
    command: mongod --shardsvr --replSet shard1 --bind_ip_all --port 27018
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-rep2:
    image: mongo:latest
    container_name: shard1-rep2
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard1-rep2-data:/data/db
    command: mongod --shardsvr --replSet shard1 --bind_ip_all --port 27019
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-rep3:
    image: mongo:latest
    container_name: shard1-rep3
    restart: always
    ports:
      - "27020:27020"
    volumes:
      - shard1-rep3-data:/data/db
    command: mongod --shardsvr --replSet shard1 --bind_ip_all --port 27020
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-rep1:
    image: mongo:latest
    container_name: shard2-rep1
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard2-rep1-data:/data/db
    command: mongod --shardsvr --replSet shard2 --bind_ip_all --port 27021
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-rep2:
    image: mongo:latest
    container_name: shard2-rep2
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard2-rep2-data:/data/db
    command: mongod --shardsvr --replSet shard2 --bind_ip_all --port 27022
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-rep3:
    image: mongo:latest
    container_name: shard2-rep3
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2-rep3-data:/data/db
    command: mongod --shardsvr --replSet shard2 --bind_ip_all --port 27023
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos1
      - mongos2
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: mongodb://mongos_router_1:27024
      MONGODB_DATABASE_NAME: "somedb"
      
volumes:
  config-data:
  shard1-rep1-data:
  shard1-rep2-data:
  shard1-rep3-data:
  shard2-rep1-data:
  shard2-rep2-data:
  shard2-rep3-data: